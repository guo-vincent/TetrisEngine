Schema

TetrisEngine/                 Usage:
├── CMakeLists.txt            # Top-level CMake configuration
├── README.md                 # Project overview and setup instructions
├── build.py                  # Use this to make the file. Should work regardless of platform
├── setup_venv.py             # Helper function for setting up python venv, regardless of platform
├── .gitignore
├── .gitmodules               # submodules (imgui, raylib, rIlmGui)
├── docs/                     # Documentation and design notes
│   ├── configFile.in
│   ├── html_header.html.in   # dummy header, used for moving index.html from build to under docs, while still keeping relative refs.
│   ├── index.html
│   └── architecture.md       # High-level architecture diagram and explanations
├── include/                  # Public headers for the engine
│   └── TetrisEngine/         # Namespace folder
│       ├── Game.h            # Deals with scope of a single game (single or multi)
│       ├── Board.h           # Game board representation
│       ├── Piece.h           # Tetris piece definitions
│       ├── Engine.h          # Game loop and manager
│       └── NeuralNetwork.h   # NN wrapper interface
├── src/                      # Core C++ implementation
│   ├── main.cpp              # Entry point, command-line handling
│   ├── Game.cpp              # Game.h definitions
│   ├── Board.cpp             # Board mechanics implementation
│   ├── Piece.cpp             # Piece handling code
│   ├── Engine.cpp            # Core game-engine logic
│   └── NeuralNetwork.cpp     # Neural network integration (loading/saving)
├── python/                   # Python scripts for training and evaluation
│   ├── data/                 # Data preprocessing and utilities
│   │   └── utils.py          # Dataset generation and augmentation
│   ├── models/               # Saved/trained model checkpoints
│   ├── train.py              # Training script (PyTorch/TensorFlow)
│   ├── evaluate.py           # Evaluation and benchmarking
│   ├── config.yaml           # Hyperparameter settings
│   └── requirements.txt      # Python import requirements
├── data/                     # Raw and processed game-play data
│   ├── raw/                  # Raw gameplay logs or recordings
│   └── processed/            # Processed feature vectors for training
├── models/                   # Exported neural network models for C++ inference
│   └── best_model.onnx       # Example ONNX model file
├── tests/                    # Unit and integration tests
│   ├── CMakeLists.txt        # Tests-specific CMake setup
│   ├── test_board.cpp        # GoogleTest suite for Board
│   ├── test_engine.cpp       # Tests for game logic
│   └── test_neuralnet.cpp    # Tests for NN interface & inference
├── scripts/                  # Utility scripts and CI helpers
│   ├── run_all_tests.sh      # Convenience script to build and run tests
│   └──download_data.sh       # Script to fetch or update training data
└── third_party/              # Contains linker files to ONNX runtime library
    ├── imgui
    ├── raylib
    ├── rIlmGui
    └── onnxruntime/          # Note: not a submodule
        ├── include
        │   └── core
        │       └── session
        │           ├── cpu_provider_factory.h
        │           ├── onnxruntime_c_api.h
        │           ├── onnxruntime_cxx_api.h
        │           ├── onnxruntime_cxx_inline.h
        │           ├── onnxruntime_float16.h
        │           ├── onnxruntime_lite_custom_op.h
        │           ├── onnxruntime_run_options_config_keys.h
        │           ├── onnxruntime_session_options_config_keys.h
        │           ├── onnxruntime_training_c_api.h
        │           ├── onnxruntime_training_cxx_api.h
        │           ├── onnxruntime_training_cxx_inline.h
        │           └── provider_options.h
        └── lib/
            ├── windows/
            │   ├── cpu/
            │   │   ├── onnxruntime.dll
            │   │   └── onnxruntime.lib
            │   └── gpu/
            │       ├── onnxruntime.dll
            │       └── onnxruntime.lib
            ├── linux/
            │   ├── cpu/
            │   │   ├── libonnxruntime.so
            │   │   ├── libonnxruntime.so.1
            │   │   ├── libonnxruntime.so.1.21.0
            │   │   └── libonnxruntime_providers_shared
            │   └── gpu/
            │       ├── libonnxruntime.so
            │       ├── libonnxruntime.so.1
            │       ├── libonnxruntime.so.1.21.0
            │       ├── libonnxruntime_providers_shared
            │       ├── libonnxruntime_providers_cuda.so
            │       └── libonnxruntime_providers_tensorrt.so
            └── mac/
                ├── cpu/
                │   ├── libonnxruntime.1.21.0.dylib
                │   └── libonnxruntime.dylib
                └── gpu/
                    ├── libonnxruntime.1.21.0.dylib
                    └── libonnxruntime.dylib

